/* See LICENSE for licensing and NOTICE for copyright. */
package org.ldaptive.intermediate;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import org.ldaptive.asn1.DERBuffer;
import org.ldaptive.asn1.DefaultDERBuffer;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

/**
 * Unit test for {@link SyncInfoMessage}.
 *
 * @author  Middleware Services
 */
public class SyncInfoMessageTest
{


  /**
   * Sync state control test data.
   *
   * @return  response test data
   */
  @DataProvider(name = "response")
  public Object[][] createData()
  {
    final byte[] cookie = new byte[] {
      (byte) 0x72, (byte) 0x69, (byte) 0x64, (byte) 0x3D, (byte) 0x30,
      (byte) 0x30, (byte) 0x30, (byte) 0x2C, (byte) 0x63, (byte) 0x73,
      (byte) 0x6E, (byte) 0x3D, (byte) 0x32, (byte) 0x30, (byte) 0x31,
      (byte) 0x32, (byte) 0x30, (byte) 0x37, (byte) 0x30, (byte) 0x39,
      (byte) 0x32, (byte) 0x30, (byte) 0x31, (byte) 0x33, (byte) 0x31,
      (byte) 0x39, (byte) 0x2E, (byte) 0x37, (byte) 0x36, (byte) 0x34,
      (byte) 0x39, (byte) 0x31, (byte) 0x35, (byte) 0x5A, (byte) 0x23,
      (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30,
      (byte) 0x30, (byte) 0x23, (byte) 0x30, (byte) 0x30, (byte) 0x30,
      (byte) 0x23, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30,
      (byte) 0x30, (byte) 0x30,
    };
    final SyncInfoMessage m1 = new SyncInfoMessage();
    m1.setMessageType(SyncInfoMessage.Type.REFRESH_DELETE);
    m1.setCookie(cookie);

    final SyncInfoMessage m2 = new SyncInfoMessage();
    m2.setMessageType(SyncInfoMessage.Type.NEW_COOKIE);
    m2.setCookie(cookie);

    final SyncInfoMessage m3 = new SyncInfoMessage();
    m3.setMessageType(SyncInfoMessage.Type.REFRESH_PRESENT);
    m3.setCookie(cookie);
    m3.setRefreshDone(false);

    final Set<UUID> uuids = new HashSet<>();
    uuids.add(UUID.fromString("5d5da5d0-5be2-1031-8284-116ff56e4e59"));
    uuids.add(UUID.fromString("843177ec-5b0e-1031-827f-116ff56e4e59"));

    final SyncInfoMessage m4 = new SyncInfoMessage();
    m4.setMessageType(SyncInfoMessage.Type.SYNC_ID_SET);
    m4.setCookie(cookie);
    m4.setEntryUuids(uuids);
    m4.setRefreshDeletes(true);
    return
      new Object[][] {
        // refresh delete with cookie
        new Object[] {
          new DefaultDERBuffer(
            new byte[] {
              (byte) 0xA1, 0x36, 0x04, 0x34, 0x72, 0x69, 0x64, 0x3D, 0x30, 0x30, 0x30, 0x2C, 0x63, 0x73, 0x6E, 0x3D,
              0x32, 0x30, 0x31, 0x32, 0x30, 0x37, 0x30, 0x39, 0x32, 0x30, 0x31, 0x33, 0x31, 0x39, 0x2E, 0x37, 0x36,
              0x34, 0x39, 0x31, 0x35, 0x5A, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x23, 0x30, 0x30, 0x30, 0x23,
              0x30, 0x30, 0x30, 0x30, 0x30, 0x30}),
          m1,
        },
        // new cookie
        new Object[] {
          new DefaultDERBuffer(
            new byte[] {
              (byte) 0x80, 0x34, 0x72, 0x69, 0x64, 0x3D, 0x30, 0x30, 0x30, 0x2C, 0x63, 0x73, 0x6E, 0x3D, 0x32, 0x30,
              0x31, 0x32, 0x30, 0x37, 0x30, 0x39, 0x32, 0x30, 0x31, 0x33, 0x31, 0x39, 0x2E, 0x37, 0x36, 0x34, 0x39,
              0x31, 0x35, 0x5A, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x23, 0x30, 0x30, 0x30, 0x23, 0x30, 0x30,
              0x30, 0x30, 0x30, 0x30}),
          m2,
        },
        // refresh present with cookie, refresh done false
        new Object[] {
          new DefaultDERBuffer(
            new byte[] {
              (byte) 0xA2, 0x39, 0x04, 0x34, 0x72, 0x69, 0x64, 0x3D, 0x30, 0x30, 0x30, 0x2C, 0x63, 0x73, 0x6E, 0x3D,
              0x32, 0x30, 0x31, 0x32, 0x30, 0x37, 0x30, 0x39, 0x32, 0x30, 0x31, 0x33, 0x31, 0x39, 0x2E, 0x37, 0x36,
              0x34, 0x39, 0x31, 0x35, 0x5A, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x23, 0x30, 0x30, 0x30, 0x23,
              0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x01, 0x01, 0x00}),
          m3,
        },
        // sync id set, refresh deletes true
        new Object[] {
          new DefaultDERBuffer(
            new byte[] {
              (byte) 0xA3, 0x5F, 0x04, 0x34, 0x72, 0x69, 0x64, 0x3D, 0x30, 0x30, 0x30, 0x2C, 0x63, 0x73, 0x6E, 0x3D,
              0x32, 0x30, 0x31, 0x32, 0x30, 0x37, 0x30, 0x39, 0x32, 0x30, 0x31, 0x33, 0x31, 0x39, 0x2E, 0x37, 0x36,
              0x34, 0x39, 0x31, 0x35, 0x5A, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x23, 0x30, 0x30, 0x30, 0x23,
              0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x01, 0x01, (byte) 0xFF, 0x31, 0x24, 0x04, 0x10, 0x5D, 0x5D,
              (byte) 0xA5, (byte) 0xD0, 0x5B, (byte) 0xE2, 0x10, 0x31, (byte) 0x82, (byte) 0x84, 0x11, 0x6F,
              (byte) 0xF5, 0x6E, 0x4E, 0x59, 0x04, 0x10, (byte) 0x84, 0x31, 0x77, (byte) 0xEC, 0x5B, 0x0E, 0x10, 0x31,
              (byte) 0x82, 0x7F, 0x11, 0x6F, (byte) 0xF5, 0x6E, 0x4E, 0x59}),
          m4,
        },
      };
  }


  /**
   * @param  berValue  to encode.
   * @param  expected  sync info message to test.
   *
   * @throws  Exception  On test failure.
   */
  @Test(groups = {"intermediate"}, dataProvider = "response")
  public void decode(final DERBuffer berValue, final SyncInfoMessage expected)
    throws Exception
  {
    final SyncInfoMessage actual = new SyncInfoMessage();
    actual.decode(berValue);
    Assert.assertEquals(actual, expected);
  }
}
